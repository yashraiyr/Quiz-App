{"version":3,"sources":["App.js","index.js"],"names":["App","questions","questionText","answerOptions","answerText","isCorrect","_useState","useState","_useState2","Object","slicedToArray","currentQuestion","setCurrentQuestion","_useState3","_useState4","showScore","setShowScore","_useState5","_useState6","score","setScore","react_default","a","createElement","className","length","Fragment","map","answerOption","onClick","nextQuestion","handleAnswerOptionClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAEe,SAASA,IACvB,IAAMC,EAAY,CACjB,CACCC,aAAc,qDACdC,cAAe,CACd,CAAEC,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,YAAaC,WAAW,GACtC,CAAED,WAAY,eAAgBC,WAAW,GACzC,CAAED,WAAY,SAAUC,WAAW,KAGrC,CACCH,aAAc,mDACdC,cAAe,CACd,CAAEC,WAAY,iBAAkBC,WAAW,GAC3C,CAAED,WAAY,qBAAsBC,WAAW,GAC/C,CAAED,WAAY,iBAAkBC,WAAW,GAC3C,CAAED,WAAY,iBAAkBC,WAAW,KAG7C,CACCH,aAAc,oEACdC,cAAe,CACd,CAAEC,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,OAAQC,WAAW,GACjC,CAAED,WAAY,oBAAqBC,WAAW,KAGhD,CACCH,aAAc,wDACdC,cAAe,CACd,CAAEC,WAAY,YAAaC,WAAW,GACtC,CAAED,WAAY,gBAAiBC,WAAW,GAC1C,CAAED,WAAY,IAAKC,WAAW,GAC9B,CAAED,WAAY,IAAKC,WAAW,KAG9B,CACDH,aAAc,qEACdC,cAAe,CACd,CAAEC,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,OAAQC,WAAW,GACjC,CAAED,WAAY,QAASC,WAAW,MA5CRC,EAiDiBC,mBAAS,GAjD1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAiDtBK,EAjDsBH,EAAA,GAiDLI,EAjDKJ,EAAA,GAAAK,EAkDKN,oBAAS,GAlDdO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAkDtBE,EAlDsBD,EAAA,GAkDXE,EAlDWF,EAAA,GAAAG,EAmDHV,mBAAS,GAnDNW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAmDtBE,EAnDsBD,EAAA,GAmDfE,EAnDeF,EAAA,GAiE7B,OACCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbT,EACAM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,uBACsBL,EADtB,WACqClB,EAAUwB,QAG/CJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,0BAAkBZ,EAAkB,GADrC,IACgDV,EAAUwB,QAE1DJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBvB,EAAUU,GAAiBT,eAE5DmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbvB,EAAUU,GAAiBR,cAAcwB,IAAI,SAACC,GAAD,OAC7CP,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBA5BS,SAACxB,GAC5BA,GACHe,EAASD,EAAQ,GAGlB,IAAMW,EAAenB,EAAkB,EACnCmB,EAAe7B,EAAUwB,OAC5Bb,EAAmBkB,GAEnBd,GAAa,GAmBce,CAAwBH,EAAavB,aAAauB,EAAaxB,iBC9E7F4B,IAASC,OACPZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,WAAP,KACEb,EAAAC,EAAAC,cAACvB,EAAD,OAEFmC,SAASC,eAAe","file":"static/js/main.3ae9152b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function App() {\n\tconst questions = [\n\t\t{\n\t\t\tquestionText: 'Which of the following is a linear data structure?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Array', isCorrect: true },\n\t\t\t\t{ answerText: 'AVL Trees', isCorrect: false },\n\t\t\t\t{ answerText: 'Binary Trees', isCorrect: false },\n\t\t\t\t{ answerText: 'Graphs', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'Which of the following is not the type of queue?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Priority queue', isCorrect: false },\n\t\t\t\t{ answerText: 'Single Ended Queue', isCorrect: true },\n\t\t\t\t{ answerText: 'Circular queue', isCorrect: false },\n\t\t\t\t{ answerText: 'Ordinary queue', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What data structure is used for depth first traversal of a graph?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Stack', isCorrect: true },\n\t\t\t\t{ answerText: 'Queue', isCorrect: false },\n\t\t\t\t{ answerText: 'List', isCorrect: false },\n\t\t\t\t{ answerText: 'None Of The Above', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'Index of arrays in C programming langauge starts from',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Undefined', isCorrect: false },\n\t\t\t\t{ answerText: 'Either 0 or 1', isCorrect: false },\n\t\t\t\t{ answerText: '1', isCorrect: false },\n\t\t\t\t{ answerText: '0', isCorrect: true },\n\t\t\t],\n\t\t},\n    {\n\t\t\tquestionText: 'Which is the most appropriate data structure for reversing a word?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Queue', isCorrect: false },\n\t\t\t\t{ answerText: 'Stack', isCorrect: true },\n\t\t\t\t{ answerText: 'Tree', isCorrect: false },\n\t\t\t\t{ answerText: 'Graph', isCorrect: false },\n\t\t\t],\n\t\t},\n\t];\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(false);\n\tconst [score, setScore] = useState(0);\n\n\tconst handleAnswerOptionClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t};\n\treturn (\n\t\t<div className='app'>\n\t\t\t{showScore ? (\n\t\t\t\t<div className='score-section'>\n\t\t\t\t\tYour final score is {score} out of {questions.length}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question - {currentQuestion + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption) => (\n\t\t\t\t\t\t\t<button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}